import * as stm from "../../data/STM32L476";
import { generateEncodingsFromObject } from "./generate";
import { Encoding, InstrType } from "./encodings";

export enum INSTRUCTION {
  ADC_IMM_T1,
  ADC_REG_T1,
  ADC_REG_T2,
  ADD_IMM_T1,
  ADD_IMM_T2,
  ADD_IMM_T3,
  ADD_IMM_T4,
  ADD_REG_T1,
  ADD_REG_T2,
  ADD_REG_T3,
  ADD_SPI_T1,
  ADD_SPI_T2,
  ADD_SPI_T3,
  ADD_SPI_T4,
  ADD_SPR_T1,
  ADD_SPR_T2,
  ADD_SPR_T3,
  ADR_T1,
  ADR_T2,
  ADR_T3,
  AND_IMM_T1,
  AND_REG_T1,
  AND_REG_T2,
  ASR_IMM_T1,
  ASR_IMM_T2,
  ASR_REG_T1,
  ASR_REG_T2,
  B_T1,
  B_T2,
  B_T3,
  B_T4,
  BFC_T1,
  BFI_T1,
  BIC_IMM_T1,
  BIC_REG_T1,
  BIC_REG_T2,
  BKPT_T1,
  BL_T1,
  BLX_REG_T1,
  BX_T1,
  CBZ_T1,
  CBNZ_T1,
  CDP_T1,
  CDP2_T2,
  CLREX_T1,
  CLZ_T1,
  CMN_IMM_T1,
  CMN_REG_T1,
  CMN_REG_T2,
  CMP_IMM_T1,
  CMP_IMM_T2,
  CMP_REG_T1,
  CMP_REG_T2,
  CMP_REG_T3,
  CPS_T1,
  DBG_T1,
  DMB_T1,
  DSB_T1,
  EOR_IMM_T1,
  EOR_REG_T1,
  EOR_REG_T2,
  ISB_T1,
  IT_T1,
  LDC_IMM_T1,
  LDC2_IMM_T2,
  LDC_LIT_T1,
  LDC2_LIT_T2,
  LDM_T1,
  LDM_T2,
  LDMDB_T1,
  LDR_IMM_T1,
  LDR_IMM_T2,
  LDR_IMM_T3,
  LDR_IMM_T4,
  LDR_LIT_T1,
  LDR_LIT_T2,
  LDR_REG_T1,
  LDR_REG_T2,
  LDRB_IMM_T1,
  LDRB_IMM_T2,
  LDRB_IMM_T3,
  LDRB_LIT_T1,
  LDRB_REG_T1,
  LDRB_REG_T2,
  LDRBT_T1,
  LDRD_IMM_T1,
  LDRD_LIT_T1,
  LDREX_T1,
  LDREXB_T1,
  LDREXH_T1,
  LDRH_IMM_T1,
  LDRH_IMM_T2,
  LDRH_IMM_T3,
  LDRH_LIT_T1,
  LDRH_REG_T1,
  LDRH_REG_T2,
  LDRHT_T1,
  LDRSB_IMM_T1,
  LDRSB_IMM_T2,
  LDRSB_LIT_T1,
  LDRSB_REG_T1,
  LDRSB_REG_T2,
  LDRSBT_T1,
  LDRSH_IMM_T1,
  LDRSH_IMM_T2,
  LDRSH_LIT_T1,
  LDRSH_REG_T1,
  LDRSH_REG_T2,
  LDRSHT_T1,
  LDRT_T1,
  LSL_IMM_T1,
  LSL_IMM_T2,
  LSL_REG_T1,
  LSL_REG_T2,
  LSR_IMM_T1,
  LSR_IMM_T2,
  LSR_REG_T1,
  LSR_REG_T2,
  MCR_T1,
  MCR2_T2,
  MCRR_T1,
  MCRR2_T2,
  MLA_T1,
  MLS_T1,
  MOV_IMM_T1,
  MOV_IMM_T2,
  MOV_IMM_T3,
  MOV_REG_T1,
  MOV_REG_T2,
  MOV_REG_T3,
  MOVT_T1,
  MRC_T1,
  MRC2_T2,
  MRRC_T1,
  MRRC2_T2,
  MRS_T1,
  MSR_T1,
  MUL_T1,
  MUL_T2,
  MVN_IMM_T1,
  MVN_REG_T1,
  MVN_REG_T2,
  NOP_T1,
  NOP_T2,
  ORN_IMM_T1,
  ORN_REG_T1,
  ORR_IMM_T1,
  ORR_REG_T1,
  ORR_REG_T2,
  PKHBT_T1,
  PKHTB_T1,
  PLD_IMM_T1,
  PLD_IMM_T2,
  PLD_LIT_T1,
  PLD_REG_T1,
  PLI_IMMLIT_T1,
  PLI_IMMLIT_T2,
  PLI_IMMLIT_T3,
  PLI_REG_T1,
  POP_T1,
  POP_T2,
  POP_T3,
  PUSH_T1,
  PUSH_T2,
  PUSH_T3,
  QADD_T1,
  QADD16_T1,
  QADD8_T1,
  QASX_T1,
  QDADD_T1,
  QDSUB_T1,
  QSAX_T1,
  QSUB_T1,
  QSUB16_T1,
  QSUB8_T1,
  RBIT_T1,
  REV_T1,
  REV_T2,
  REV16_T1,
  REV16_T2,
  REVSH_T1,
  REVSH_T2,
  ROR_IMM_T1,
  ROR_REG_T1,
  ROR_REG_T2,
  RRX_T1,
  RSB_IMM_T1,
  RSB_IMM_T2,
  RSB_REG_T1,
  SADD16_T1,
  SADD8_T1,
  SASX_T1,
  SBC_IMM_T1,
  SBC_REG_T1,
  SBC_REG_T2,
  SBFX_T1,
  SDIV_T1,
  SEL_T1,
  SEV_T1,
  SEV_T2,
  SHADD16_T1,
  SHADD8_T1,
  SHASX_T1,
  SHSAX_T1,
  SHSUB16_T1,
  SHSUB8_T1,
  SMLABB_T1,
  SMLABT_T1,
  SMLATB_T1,
  SMLATT_T1,
  SMLAD_T1,
  SMLADX_T1,
  SMLAL_T1,
  SMLALBB_T1,
  SMLALBT_T1,
  SMLALTB_T1,
  SMLALTT_T1,
  SMLALD_T1,
  SMLALDX_T1,
  SMLAWB_T1,
  SMLAWT_T1,
  SMLSD_T1,
  SMLSDX_T1,
  SMLSLD_T1,
  SMLSLDX_T1,
  SMMLA_T1,
  SMMLAR_T1,
  SMMLS_T1,
  SMMLSR_T1,
  SMMUL_T1,
  SMMULR_T1,
  SMUAD_T1,
  SMUADX_T1,
  SMULBB_T1,
  SMULBT_T1,
  SMULTB_T1,
  SMULTT_T1,
  SMULL_T1,
  SMULWB_T1,
  SMULWT_T1,
  SMUSD_T1,
  SMUSDX_T1,
  SSAT_T1,
  SSAT16_T1,
  SSAX_T1,
  SSUB16_T1,
  SSUB8_T1,
  STC_T1,
  STC2_T2,
  STM_T1,
  STM_T2,
  STMDB_T1,
  STR_IMM_T1,
  STR_IMM_T2,
  STR_IMM_T3,
  STR_IMM_T4,
  STR_REG_T1,
  STR_REG_T2,
  STRB_IMM_T1,
  STRB_IMM_T2,
  STRB_IMM_T3,
  STRB_REG_T1,
  STRB_REG_T2,
  STRBT_T1,
  STRD_IMM_T1,
  STREX_T1,
  STREXB_T1,
  STREXH_T1,
  STRH_IMM_T1,
  STRH_IMM_T2,
  STRH_IMM_T3,
  STRH_REG_T1,
  STRH_REG_T2,
  STRHT_T1,
  STRT_T1,
  SUB_IMM_T1,
  SUB_IMM_T2,
  SUB_IMM_T3,
  SUB_IMM_T4,
  SUB_REG_T1,
  SUB_REG_T2,
  SUB_SMI_T1,
  SUB_SMI_T2,
  SUB_SMI_T3,
  SUB_SMR_T1,
  SVC_T1,
  SXTAB_T1,
  SXTAB16_T1,
  SXTAH_T1,
  SXTB_T1,
  SXTB_T2,
  SXTB16_T1,
  SXTH_T1,
  SXTH_T2,
  TBB_T1,
  TBH_T1,
  TEQ_IMM_T1,
  TEQ_REG_T1,
  TST_IMM_T1,
  TST_REG_T1,
  TST_REG_T2,
  UADD16_T1,
  UADD8_T1,
  UASX_T1,
  UBFX_T1,
  UDF_T1,
  UDF_T2,
  UDIV_T1,
  UHADD16_T1,
  UHADD8_T1,
  UHASX_T1,
  UHSAX_T1,
  UHSUB16_T1,
  UHSUB8_T1,
  UMAAL_T1,
  UMLAL_T1,
  UMULL_T1,
  UQADD16_T1,
  UQADD8_T1,
  UQASX_T1,
  UQSAX_T1,
  UQSUB16_T1,
  UQSUB8_T1,
  USAD8_T1,
  USADA8_T1,
  USAT_T1,
  USAT16_T1,
  USAX_T1,
  USUB16_T1,
  USUB8_T1,
  UXTAB_T1,
  UXTAB16_T1,
  UXTAH_T1,
  UXTB_T1,
  UXTB_T2,
  UXTB16_T1,
  UXTH_T1,
  UXTH_T2,
  WFE_T1,
  WFE_T2,
  WFI_T1,
  WFI_T2,
  YIELD_T1,
  YIELD_T2,

  // internal use
  TODO,
  INVALID,

  // instructions
  UNDEFINED,
  UNALLOCATED,
  UNPREDICTABLE,
}

const I = INSTRUCTION;

const orderedEncodings: Encoding[] = generateEncodingsFromObject(stm.encodings);
const numEncodings = orderedEncodings.length;

const todoEncoding = new Encoding({name: "TODO", pattern: "0000 0000 0000 0000", encoding: 0, type: InstrType.NONE, page: 0, invalid: true });
const invalidEncoding = new Encoding({name: "INVALID", pattern: "0000 0000 0000 0000", encoding: 0, type: InstrType.NONE, page: 0, invalid: true });
const unallocatedEncoding = new Encoding({name: "UNALLOCATED", pattern: "0000 0000 0000 0000", encoding: 0, type: InstrType.NONE, page: 0, invalid: true });
const unpredictableEncoding = new Encoding({name: "UNPREDICTABLE", pattern: "0000 0000 0000 0000", encoding: 0, type: InstrType.NONE, page: 0, invalid: true });
const undefinedEncoding = new Encoding({name: "UNDEFINED", pattern: "0000 0000 0000 0000", encoding: 0, type: InstrType.NONE, page: 0, invalid: true });

export function instructionToEncoding (instruction: INSTRUCTION): Encoding {
  if (instruction >= numEncodings) {
    switch (instruction) {
      case I.TODO: return todoEncoding;
      case I.INVALID: return invalidEncoding;
      case I.UNALLOCATED: return unallocatedEncoding;
      case I.UNPREDICTABLE: return unpredictableEncoding;
      default: return undefinedEncoding;
    }
  }
  return orderedEncodings[instruction];
}
